/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.linuxstore.shell;

import com.linuxstore.ejb.entity.Application;
import com.linuxstore.ejb.entity.Application.Category;
import com.linuxstore.ejb.remote.ApplicationFacadeRemote;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;

/**
 *
 * @author Clement WIRTH
 */
public class Shell {

    /**
     * @param args the command line arguments
     */
    @EJB
    private static ApplicationFacadeRemote applications;
    private boolean isRunning;

    public Shell() {
        isRunning = true;
    }

    private void stopRunning() {
        isRunning = false;
    }

    public boolean isRunning() {
        return isRunning;
    }

    public String executeCommand(String cmd, String[] params) {
        if (cmd.equals("exit")) {
            stopRunning();
            return "Fermeture du client lourd.";
        } else if (cmd.equals("exec")) {
            if (params.length == 0) {
                return "syntaxe : exec fileName <fileName2> ...";
            } else {
                String out = "";
                for (int i = 0; i < params.length; i++) {
                    out += executeCommandFromFile(params[i]);
                }
                return out;
            }
        } else if (cmd.equals("help")) {
            //if (params.length == 0) {
            return commandList();
            //}
        } else if (cmd.equals("show")) {
            return show(params);
        } else if (cmd.equals("search")) {
            return search(params);
        } else if (cmd.equals("add")) {
            return add(params);
        } else if (cmd.equals("addfile")) {
            return addFile(params);
        } else if (cmd.equals("clear")) {
            return clear();
        } else if (cmd.equals("remove")) {
            return remove(params);
        } else {
            return "Commande inconnue";
        }
    }

    private String addFile(String[] params) {
        //TODO: READ FROM FILE
        return "";
    }

    private String add(String[] params) {
        if (params.length < 4) {
            return "Erreur de syntaxe : add name category price description";
        }
        String name = params[0];
        if (applications.findByName(name) != null) {
            return "Erreur : une application du meme nom existe deja";
        }
        Category cate;
        try {
            cate = Category.valueOf(params[1]);
        } catch (IllegalArgumentException e) {
            return params[1] + " n'est pas une categorie";
        }
        Float price = Float.parseFloat(params[2]);
        String description = "";
        for (int i = 3; i < params.length; i++) {
            description += params[i] + " ";
        }
        Application appli = new Application();
        appli.setName(name);
        appli.setCategory(cate);
        appli.setPrice(price);
        appli.setDescription(description);
        applications.create(appli);
        return "Application "+appli.getName()+" ajoutée";
    }

    private String show(String[] params) {
        List<Application> liste = applications.findAll();
        String catRecherche = "applications";
        if (params.length > 0) {
            try {
                Category cat = Category.valueOf(params[0]);
                liste = applications.filter(liste, cat);
                catRecherche = cat.name();
            } catch (IllegalArgumentException e) {
                return params[0] + " n'est pas une categorie";
            }
        }
        String out = "Liste des " + catRecherche + " : \n";
        for (Application application : liste) {
            out += application.getName() + " (" + application.getCategory().name() + ") Prix : " + application.getPrice() + " euros\n";
            out += "\tdescription : " + application.getDescription() + "\n\n";
        }
        return out;
    }

    private String search(String[] params) {
        if (params.length == 0) {
            return "Syntaxe : search keyword <filter> <category>";
        }
        String chaine = params[0];
        List<Application> liste = applications.search(chaine);
        if (params.length > 1) {
            if (params[1].equals("name")) {
                applications.sortByName(liste);
            } else {
                applications.sortByPrice(liste);
            }
            if (params.length > 2) {
                try {
                    Category cat = Category.valueOf(params[2]);
                    liste = applications.filter(liste, cat);
                } catch (IllegalArgumentException e) {
                    return params[2] + " n'est pas une categorie";
                }
            }
        }
        String out = "";
        for (Application application : liste) {
            out += application.getName() + " (" + application.getCategory().name() + ") Prix : " + application.getPrice() + " euros\n";
            out += "\tdescription : " + application.getDescription() + "\n\n";
        }
        return out;
    }

    private String clear() {
        List<Application> liste = applications.findAll();
        for (Application appli : liste) {
            applications.remove(appli);
        }
        return "Toute les applications viennent d'être supprimées";
    }

    private String remove(String[] params) {
        String name = params[0];
        Application appli = applications.findByName(name);
        if (appli != null) {
            applications.remove(appli);
            return "L'application :" + appli.toString() + " vient d'être supprimé";
        }
        return "commande exécutée";
    }

    private String commandList() {
        String out = "Liste des commandes : commande parametre <optionnel>\n";
        out += "exit - Quitte l'application.\n";
        out += "help - Affiche les commandes disponibles.\n";
        out += "exec fileName <fileName2> ... - Execute les commandes contenus dans le fichier filename, filename2, ... \n";
        out += "show <category> - Affiche toutes les applications ou les applications de la categorie category\n";
        out += "search keyword <filter> <category> - cherche les application contenant les mots cles keyword+\n";
        out += "\t <filter> - filtre de la recherche : price or name. Filtre par defaut : price\n";
        out += "\t <category> - affiche uniquement les applications de la categorie category\n";
        out += "add name category price description - ajoute une application de nom name, de categorie category, de prix price et de description description\n";
        out += "addfile fileName <fileName2> ... - Ajoute les applications contenues dans le fichier fileName\n";
        out += "clear - Supprime toutes les applications contenues dans la base de données\n";
        out += "remove name- Supprime l'application name de la base de données\n";
        return out;
    }

    public String[] getCommandString(String cmd) {
        String[] split = cmd.split(" ");
        ArrayList<String> listeComplete = new ArrayList<String>();
        String motEnCours = "";
        for (String mot : split) {
            if (mot.startsWith("\"")) {
                if (mot.endsWith("\"")) {
                    listeComplete.add(mot.substring(1, mot.length() - 1));
                } else {
                    motEnCours += mot.substring(1) + " ";
                }
            } else if (!motEnCours.equals("") && !mot.endsWith("\"")) {
                motEnCours += mot + " ";
            } else if (!motEnCours.equals("") && mot.endsWith("\"")) {
                motEnCours += mot.substring(0, mot.length() - 1);
                listeComplete.add(motEnCours);
                motEnCours = "";
            } else {
                listeComplete.add(mot);
            }
        }
        return listeComplete.toArray(new String[listeComplete.size()]);
    }

    public String executeCommandFromFile(String fileName) {
        String out = "";
        try {
            File file = new File(fileName);
            if (!file.exists() && file.length() < 0) {
                return "Ce fichier n'existe pas !";
            }
            Scanner sc = new Scanner(file);

            while (sc.hasNextLine()) {
                String[] input = getCommandString(sc.nextLine());
                String[] arguments = {};
                if (input.length > 1) {
                    arguments = new String[input.length - 1];
                    System.arraycopy(input, 1, arguments, 0, input.length - 1);
                }
                out += executeCommand(input[0], arguments)+"\n";

            }
        } catch (FileNotFoundException ex) {
            return "Erreur lors de l'ouverture du fichier :  Ce fichier n'existe pas";
        }
        return out;

    }

    public static void main(String[] args) {
        Shell shell = new Shell();
        Scanner sc = new Scanner(System.in).useDelimiter("\n");
        System.out.println("<--- LinuwStore shell --->");
        while (shell.isRunning) {
            System.out.print("->");
            String[] input = shell.getCommandString(sc.next());
            String[] arguments = {};
            if (input.length > 1) {
                arguments = new String[input.length - 1];
                System.arraycopy(input, 1, arguments, 0, input.length - 1);
            }
            System.out.println(shell.executeCommand(input[0], arguments));
        }

    }
}
